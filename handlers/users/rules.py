# aiogram
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command

# local imports
from handlers.users.search_chat import change_user_status_to_default_message
from keyboards.default import menu_keyboard
from loader import router, dp, bot
from handlers.users.profile import admin_ids

# database
import sqlite3

# Getting link on rules from config
rules_link = open('data/text/config.txt', 'r').readlines()[2].split('\\')[0].replace(' ', '')


# Command handler /rule, send all rules
@dp.message(Command("rules"))
async def start(message: types.Message):
    # Connecting to database
    conn = sqlite3.connect('data/database/database.sqlite')
    cursor = conn.cursor()

    cursor.execute("SELECT status FROM users WHERE tg_id = ?", (message.from_user.id,))

    result = cursor.fetchone()
    user_status = ''

    if result is not None:
        user_status = result[0]

    # Closing database connecting
    cursor.close()
    conn.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å –±–∞–ª–∞–Ω—Å–∞
    if user_status == 'blacklist' and message.from_user.id not in admin_ids:
        await message.answer('–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫‚ö´Ô∏è \n\n'
                             '–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω!')
    else:

        await change_user_status_to_default_message(message)

        await message.answer(f'üìú<b>–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <a href="{rules_link}">–∑–¥–µ—Å—å</a></b>', parse_mode=ParseMode.HTML, reply_markup=menu_keyboard)
