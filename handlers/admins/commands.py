# aiogram
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command

from handlers.users.profile import show_profile_callback_request
# local imports
from keyboards.inline import profile_inline_keyboard, gender_inline_keyboard, age_inline_keyboard
from loader import router, dp, bot

# database
import sqlite3

# other
from time import sleep

# Getting admin ids from config
admin_ids = [int(i) for i in
             open('data/text/config.txt', 'r').readlines()[1].split('\\')[0].replace(' ', '').split(',')]


# Handler command /admin
@dp.message(Command("admin"))
async def admin(message: types.Message):
    # Checking is user in admins or not
    if message.from_user.id in admin_ids:
        await message.answer(f'–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–æ–≤:\n\n'
                             f'1) –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'
                             f'/user id\n\n'
                             f'2) –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'
                             f'/users –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n'
                             f'3) –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'
                             f'/blacklist id\n'
                             f'(–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ)\n\n')


# Handler command /gettable
@dp.message(Command("gettable"))
async def gettable(message: types.Message):
    # Checking is user in admins or not
    if message.from_user.id in admin_ids:

        # Connecting to database
        conn = sqlite3.connect('data/database/database.sqlite')
        cursor = conn.cursor()

        cursor.execute(f"SELECT * FROM {message.text.split(' ')[1]}")
        rows = cursor.fetchall()

        table_str = "id | username | data | gender | age | good_rep | bad_rep | dialogs | messages | status | reports\n"

        for row in rows:
            table_str += " | ".join(str(cell) for cell in row) + "\n"

        conn.close()

        MAX_MESSAGE_LENGTH = 4000

        if len(table_str) > MAX_MESSAGE_LENGTH:
            parts = [table_str[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(table_str), MAX_MESSAGE_LENGTH)]
        else:
            parts = [table_str]

        for part in parts:
            await message.answer(part)


# Handler command /user
@dp.message(Command("user"))
async def users(message: types.Message):
    # Checking is user in admins or not
    if message.from_user.id in admin_ids:
        user_id = int(message.text.split(' ')[1])

        # Connecting to database
        conn = sqlite3.connect('data/database/database.sqlite')
        cursor = conn.cursor()

        # Select user data
        cursor.execute(f"SELECT * FROM users WHERE tg_id = ?", (user_id,))
        user_info = cursor.fetchall()[0]

        conn.close()

        await message.answer(f'üë§ –ü—Ä–æ—Ñ–∏–ª—å: #{user_info[0]}\n'
                             f'‚úàÔ∏è Username: @{user_info[1]}\n'
                             f'üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info[2]}\n'
                             f'‚õîÔ∏è –ñ–∞–ª–æ–±: {user_info[10]}\n'
                             f'üë• –†–µ–ø—É—Ç–∞—Ü–∏—è: üëç({user_info[5]}) üëé({user_info[6]})\n'
                             f'üë´ –ü–æ–ª: {user_info[3]}\n'
                             f'üîû –í–æ–∑—Ä–∞—Å—Ç: {user_info[4]}\n'
                             f'üí¨ –î–∏–∞–ª–æ–≥–æ–≤: {user_info[7]}\n'
                             f'üì© –°–æ–æ–±—â–µ–Ω–∏–π: {user_info[8]}\n'
                             f'‚≠êÔ∏è –°—Ç–∞—Ç—É—Å: {user_info[9]}\n\n')


# Handler command /users
@dp.message(Command("users"))
async def users(message: types.Message):
    # Checking is user in admins or not
    if message.from_user.id in admin_ids:
        count = int(message.text.split(' ')[1])

        # Connecting to database
        conn = sqlite3.connect('data/database/database.sqlite')
        cursor = conn.cursor()

        cursor.execute(f"SELECT * FROM users")
        rows = cursor.fetchall()

        table_str = ''

        try:
            for i in range(count):
                row = rows[i]

                table_str += f'üë§ –ü—Ä–æ—Ñ–∏–ª—å: #{row[0]}\n' \
                             f'‚úàÔ∏è Username: @{row[1]}\n' \
                             f'üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {row[2]}\n' \
                             f'‚õîÔ∏è –ñ–∞–ª–æ–±: {row[10]}\n' \
                             f'üë• –†–µ–ø—É—Ç–∞—Ü–∏—è: üëç({row[5]}) üëé({row[6]})\n' \
                             f'üë´ –ü–æ–ª: {row[3]}\n' \
                             f'üîû –í–æ–∑—Ä–∞—Å—Ç: {row[4]}\n' \
                             f'üí¨ –î–∏–∞–ª–æ–≥–æ–≤: {row[7]}\n' \
                             f'üì© –°–æ–æ–±—â–µ–Ω–∏–π: {row[8]}\n' \
                             f'‚≠êÔ∏è –°—Ç–∞—Ç—É—Å: {row[9]}\n\n'
        except Exception as e:
            await message.answer('–°—Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')

        conn.close()

        MAX_MESSAGE_LENGTH = 4000

        if len(table_str) > MAX_MESSAGE_LENGTH:
            parts = [table_str[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(table_str), MAX_MESSAGE_LENGTH)]
        else:
            parts = [table_str]

        for part in parts:
            await message.answer(part)


# Handler command /users
@dp.message(Command("blacklist"))
async def blacklist(message: types.Message):
    # Checking is user in admins or not
    if message.from_user.id in admin_ids:
        user_id = int(message.text.split(' ')[1])

        # Connecting to database
        conn = sqlite3.connect('data/database/database.sqlite')
        cursor = conn.cursor()

        # Updating user status
        cursor.execute("SELECT status FROM users WHERE tg_id = ?", (user_id,))

        result = cursor.fetchone()
        bl_user_status = result[0]

        # Adding user to blacklist, if he is not already here
        if bl_user_status != 'blacklist':
            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
            cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""",
                           ('blacklist', user_id))
            conn.commit()

            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫‚ö´Ô∏è')
        # –ï—Å–ª–∏ –∂–µ –æ–Ω —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –±–µ–ª—ã–π
        else:
            # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å
            cursor.execute("""UPDATE users SET status = ? WHERE tg_id = ?""",
                           ('default', user_id))
            conn.commit()

            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫‚ö™Ô∏è')

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        conn.close()
